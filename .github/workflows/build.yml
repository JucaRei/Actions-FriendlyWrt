on: push
  # watch:
  #   types: started
jobs:
  prepare_release:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Get release tag
      id: release_tag
      run: |
        release_tag="FriendlyWrt-$(date +%Y-%m-%d)"
        echo "##[set-output name=release_tag;]$release_tag"

    - name: Create empty release
      id: release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_tag.outputs.release_tag }}
        draft: false
        prerelease: false
    outputs:
      release_tag: ${{ steps.release_tag.outputs.release_tag }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  build_friendlywrt:
    # timeout-minutes: 600
    needs: prepare_release
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    strategy:
      matrix:
        # VERSION: [21.02, 23.05]
        # VERSION: [ 23.05 ]
        # SET: [docker, non-docker]
        # SET: [ docker ]
        VERSION: [ '24.10' ]
        # SET: [ docker ]
        SET: [ non-docker ]
        # SET: [docker, non-docker]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^(cat fa-toolchain/# (cat fa-toolchain/g' install.sh
        sed -i -e 's/^(tar xf fa-toolchain/# (tar xf fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        sudo -E update-alternatives --install $(which python) python /usr/bin/python2.7 20
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        git clone https://github.com/friendlyarm/repo
        sudo -E cp repo/repo /usr/bin/
        mkdir -p ./artifact
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc
        echo "cores: $(nproc)"

    - name: Download source
      run: |
        mkdir project
        cd project
        repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
                -m rk3566.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle

        repo sync -c friendlywrt --no-clone-bundle
        repo sync -c configs --no-clone-bundle
        repo sync -c device/common --no-clone-bundle
        repo sync -c device/friendlyelec --no-clone-bundle
        repo sync -c scripts --no-clone-bundle
        repo sync -c scripts/sd-fuse  --no-clone-bundle
        repo sync -c toolchain  --no-clone-bundle

    - name: Apply customizations
      run: |
        cd project
        # wget https://gist.githubusercontent.com/JucaRei/e0faf072848f8c9ffd26ecb18e0733cf/raw/948167483fb403398d04b990feebfbfbf00baa34/.config -P friendlywrt
        # wget https://gist.githubusercontent.com/JucaRei/84c3d77a6b8786653d10cf2fb5a6aeff/raw/624a47e1eb22f2f0c19f71ba44f07fe58b4af140/.config -P friendlywrt
        # wget https://gist.githubusercontent.com/JucaRei/9560007c4eb36d5dd6d54fc1d2871aaa/raw/870c493f7847de773a342e99ec9592d3be89e5be/.config -P friendlywrt
        source ../scripts/add_packages.sh
        source ../scripts/custome_config.sh
        sed -i 's/192.168.2.1/11.11.11.1/g' friendlywrt/target/linux/rockchip/armv8/base-files/etc/board.d/02_network

    - name: Prepare dot config and feeds
      run: |
        cd project
        [ "${{ matrix.SET }}" == "docker" ] && SUFFIX="-docker"
        DIRNAME=friendlywrt$(echo ${{ matrix.VERSION }}|awk -F . '{print $1}')${SUFFIX}
        CONFIG=rockchip${SUFFIX}
        cat > .current_config.mk <<EOL
        . device/friendlyelec/rk3566/base.mk
        TARGET_IMAGE_DIRNAME=${DIRNAME}
        TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
        EOL
        DEBUG_DOT_CONFIG=1 ./build.sh friendlywrt

    - name: Download package
      run: |
        cd project/friendlywrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile friendlyWrt
      id: compile
      continue-on-error: true
      run: |
        cd project/friendlywrt
        # wget -c https://gist.githubusercontent.com/JucaRei/9560007c4eb36d5dd6d54fc1d2871aaa/raw/b269375124cbf5d6c8dc71f13f044eaf849844d9/.config
        cp .config .config.old
        make -j$(nproc) || make -j1 V=s
        echo $?

    - name: Check the result and try again
      if: steps.compile.outcome == 'failure'
      run: |
        cd project/friendlywrt
        rm .config .config.old
        wget -c https://gist.githubusercontent.com/JucaRei/9560007c4eb36d5dd6d54fc1d2871aaa/raw/b269375124cbf5d6c8dc71f13f044eaf849844d9/.config
        cp .config .config.old

        make -j1 V=sc

    - name: Create rootfs package
      id: create_rootfs_package
      run: |
        cd project
        source .current_config.mk
        [ "${{ matrix.SET }}" == "docker" ] && SUFFIX="-docker"
        rootfs_filename="rootfs-friendlywrt-${{ matrix.VERSION }}${SUFFIX}.tgz"
        tar cvzf ../artifact/${rootfs_filename} ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_ROOTFS} \
              ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_PACKAGE_DIR}
        echo "##[set-output name=rootfs_filename;]$rootfs_filename"

    - name: Upload rootfs package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        asset_name: ${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true

  build_img:
    # timeout-minutes: 600
    needs: [prepare_release,build_friendlywrt]
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      matrix:
        # VERSION: [ 21.02, 23.05 ]
        VERSION: [ 23.05, 24.10 ]
        # CPU: [rk3328, rk3528, rk3399, rk3566, rk3568, rk3588]
        CPU: [ rk3566 ]
        # SET: [docker, non-docker]
        # SET: [ docker ]
        SET: [ non-docker ]
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^(cat fa-toolchain/# (cat fa-toolchain/g' install.sh
        sed -i -e 's/^(tar xf fa-toolchain/# (tar xf fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        sudo -E update-alternatives --install $(which python) python /usr/bin/python2.7 20
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        git clone https://github.com/friendlyarm/repo
        sudo -E cp repo/repo /usr/bin/
        mkdir -p ./artifact
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc
        echo "cores: $(nproc)"

    - name: Download source
      run: |
        mkdir project
        cd project
        repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
                -m ${{ matrix.CPU }}.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle

        repo sync -c kernel --no-clone-bundle
        repo sync -c u-boot --no-clone-bundle
        repo sync -c rkbin --no-clone-bundle
        repo sync -c configs --no-clone-bundle
        repo sync -c device/common --no-clone-bundle
        repo sync -c device/friendlyelec --no-clone-bundle
        repo sync -c scripts --no-clone-bundle
        repo sync -c scripts/sd-fuse  --no-clone-bundle
        repo sync -c toolchain  --no-clone-bundle

    - name: Download friendlywrt rootfs (non-docker)
      if: matrix.SET == 'non-docker'
      uses: robinraju/release-downloader@v1.6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repository: ${{ github.repository }}
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        fileName: "rootfs-friendlywrt-${{ matrix.VERSION }}.tgz"

    - name: Download friendlywrt rootfs (docker)
      if: matrix.SET == 'docker'
      uses: robinraju/release-downloader@v1.6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repository: ${{ github.repository }}
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        fileName: "rootfs-friendlywrt-${{ matrix.VERSION }}-docker.tgz"

    - name: Prepare config
      id: config
      run: |
        cd project
        case ${{ matrix.CPU }} in
        # rk3328)
        #   MODEL=R2S-R2C-Series
        #   ;;
        # rk3528)
        #   MODEL=NanoPi-Zero2
        #   ;;
        # rk3399)
        #   MODEL=R4S-Series
        #   ;;
        # rk3568)
        #   MODEL=R5S-R5C-Series
        #   ;;
        rk3566)
          MODEL=R3S-Series
          ;;
        # rk3588)
        #   MODEL=T6-R6S-R6C-M6-Series
        #   ;;
        *)
          echo "unknow cpu"
          exit 1
          ;;
        esac
        [ "${{ matrix.SET }}" == "docker" ] && SUFFIX="-docker"
        FILENAME=${MODEL}-FriendlyWrt-${{ matrix.VERSION }}${SUFFIX}.img
        DIRNAME=friendlywrt$(echo ${{ matrix.VERSION }}|awk -F . '{print $1}')${SUFFIX}
        CONFIG=rockchip${SUFFIX}
        cat > .current_config.mk <<EOL
        . device/friendlyelec/${{ matrix.CPU }}/base.mk
        TARGET_IMAGE_DIRNAME=${DIRNAME}
        TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
        TARGET_SD_RAW_FILENAME=${FILENAME}
        EOL
        echo "##[set-output name=img_filename;]$FILENAME"

    - name: Unpack friendlywrt rootfs
      run: |
        cd project
        [ "${{ matrix.SET }}" == "docker" ] && SUFFIX="-docker"
        tar xvzf "../rootfs-friendlywrt-${{ matrix.VERSION }}${SUFFIX}.tgz"

    - name: Compile uboot and kernel
      run: |
        cd project
        ## wget https://gist.githubusercontent.com/JucaRei/41f48ce460b480a6bffb0b2e3a177714/raw/6c0f9bc41f60d6dd2263b6bd16d482108ec43bf8/.config -P u-boot
        rm u-boot/configs/nanopi_r3_defconfig
        wget https://gist.githubusercontent.com/JucaRei/bb72daaffa4a673df7ce5a86cbd7ca1b/raw/eba8ae3a7da17367c965bac84afbbb20bd22f9ca/nanopi_r3_defconfig -P u-boot/configs
        wget https://gist.githubusercontent.com/JucaRei/6276c6ab5852c0b4722b340ff884b424/raw/71fb6b79f4096d6950fe16a547a4e3e45a67bada/.config -P u-boot
        cp u-boot/.config u-boot/.config.old
        ./build.sh uboot

        # sed -i "/^CONFIG_NUMA_BALANCING=y=.*/i\CONFIG_NUMA_BALANCING=yn\CONFIG_CGROUP_SCHED=yn\CONFIG_RT_GROUP_SCHED=yn\CONFIG_UCLAMP_TASK_GROUP=yn\CONFIG_CGROUP_RDMA=yn\CONFIG_CGROUP_CPU=yn\CONFIG_CGROUP_DEBUG=yn\CONFIG_MEMCG_SWAP=yn\CONFIG_MEMCG_SWAP_ENABLED=y" kernel/arch/arm64/configs/defconfig

        # sed -i "/^CONFIG_MEMCG=y=.*/i\CONFIG_NUMA_BALANCING=yn\CONFIG_CGROUP_SCHED=yn\CONFIG_RT_GROUP_SCHED=yn\CONFIG_UCLAMP_TASK_GROUP=yn\CONFIG_CGROUP_RDMA=yn\CONFIG_CGROUP_CPU=yn\CONFIG_CGROUP_DEBUG=yn\CONFIG_MEMCG_SWAP=yn\CONFIG_MEMCG_SWAP_ENABLED=y" kernel/arch/arm64/configs/rockchip_defconfig

        # sed -i "/^CONFIG_MEMCG=y=.*/i\CONFIG_NUMA_BALANCING=yn\CONFIG_CGROUP_SCHED=yn\CONFIG_RT_GROUP_SCHED=yn\CONFIG_UCLAMP_TASK_GROUP=yn\CONFIG_CGROUP_RDMA=yn\CONFIG_CGROUP_CPU=yn\CONFIG_CGROUP_DEBUG=yn\CONFIG_MEMCG_SWAP=yn\CONFIG_MEMCG_SWAP_ENABLED=y" kernel/arch/arm64/configs/nanopi5_linux_defconfig

        # sed -i "/^CONFIG_UCLAMP_BUCKETS_COUNT=20=.*/i\CONFIG_NUMA_BALANCING=yn\CONFIG_CGROUP_SCHED=yn\CONFIG_RT_GROUP_SCHED=yn\CONFIG_UCLAMP_TASK_GROUP=yn\CONFIG_CGROUP_RDMA=yn\CONFIG_CGROUP_CPU=yn\CONFIG_CGROUP_DEBUG=yn\CONFIG_MEMCG_SWAP=yn\CONFIG_MEMCG_SWAP_ENABLED=y" kernel/arch/arm64/configs/rockchip_linux_defconfig

        # sed -i "/^CONFIG_CGROUP_PIDS=y=.*/i\CONFIG_NUMA_BALANCING=yn\CONFIG_CGROUP_SCHED=yn\CONFIG_RT_GROUP_SCHED=yn\CONFIG_UCLAMP_TASK_GROUP=yn\CONFIG_CGROUP_RDMA=yn\CONFIG_CGROUP_CPU=yn\CONFIG_CGROUP_DEBUG=yn\CONFIG_MEMCG_SWAP=yn\CONFIG_MEMCG_SWAP_ENABLED=y" kernel/arch/arm64/configs/rockchip_linux_docker.config

        # sed -i -e '$a\'$'\n''CONFIG_MALI_CSF_SUPPORT=y' kernel/arch/arm64/configs/rk356x.config

        # rm kernel/arch/arm64/configs/nanopi5_linux_defconfig
        # wget https://gist.githubusercontent.com/JucaRei/a3206e38e72f2b3dd3bd8d1d2f9a9f9c/raw/276400501007be9669908522fbca47e7b0b6d218/nanopi5_linux_defconfig -P kernel/arch/arm64/configs

        # Lastest
        wget https://gist.githubusercontent.com/JucaRei/3416991db22739b8bf0289355b6d9e70/raw/ceae22b662ed0d8e6be4151789ddd2463bfa1bc8/.config -P kernel
        cp kernel/.config kernel/.config.old

        ./build.sh kernel

        ## If you want to compile a driver from source, here is an example
        # case ${{ matrix.CPU }} in
        # rk3568)
        #     ../scripts/3rd/add_r8125.sh
        #     ../scripts/3rd/add_8188gu.sh
        #     ;;
        # esac

    - name: Build sd image
      id: build_sd_image
      run: |
        cd project
        ./build.sh sd-img
        mv out/${{ steps.config.outputs.img_filename }} ../artifact/
        cd ../artifact/
        gzip *.img

    - name: Upload image to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.config.outputs.img_filename }}.gz
        asset_name: ${{ steps.config.outputs.img_filename }}.gz
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true
